{"version":3,"sources":["components/DataProvider.tsx","components/Home.tsx","components/LevelDetail.tsx","components/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataContext","React","createContext","isLoading","quesDict","usedChoices","setUsedChoices","csvString","require","serializeCsvData","rows","forEach","row","push","level","en","trim","meanings","DataProvider","props","useState","setisLoading","setDict","getData","a","axios","get","process","res","status","csvBody","request","responseText","dict","parse","useEffect","Provider","value","children","LevelWrapper","styled","div","Level","history","useHistory","className","onClick","id","label","levels","data","useContext","Object","keys","useLevels","map","key","QUESTION_NUMBER_PER_LEVEL","Number","voice","window","talkify","Html5Player","forceLanguage","setRate","Question","question","onChoosen","console","log","playText","handle","setTimeout","clearTimeout","timeOnQuestion","useMemo","Date","now","context","useSetUsedChoices","choices","choice","index","style","pointerEvents","diff","Math","round","ProgressBarWrapper","params","useParams","questions","usedChocies","unUsedChoices","_","xor","length","useQuestions","totalQuestions","totalChoices","currentIndex","setIndex","take","shuffle","opts","filter","answers","setAnswers","useCallback","currentQuestion","answer","userTime","questionPoints","ans","userAnswer","i","questionAnswers","display","height","progress","showPercentage","Sentence","QA","ResultPageWrapper","QAs","location","state","wrongAnswers","getFullYear","getMonth","getDate","type","print","LoadingWrapper","App","Consumer","exact","path","Home","LevelDetail","Result","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bf4c1d9.chunk.js","sourcesContent":["import axios from \"axios\";\nimport _ from \"lodash\";\nimport React, { useState } from \"react\";\nexport const DataContext = React.createContext<{\n  isLoading: boolean;\n  quesDict: {\n    [key: number]: IQuestion[];\n  };\n  usedChoices: string[];\n  setUsedChoices: any;\n}>({\n  isLoading: true,\n  quesDict: {},\n  usedChoices: [],\n  // tslint:disable-next-line:no-empty\n  setUsedChoices: () => {},\n});\n\n// tslint:disable-next-line:no-var-requires\nconst csvString = require(\"csv-string\");\n\nexport interface IQuestion {\n  level: number;\n  en: string;\n  meanings: string[];\n}\n\nexport const useSetUsedChoices = () => {\n  const context = React.useContext(DataContext);\n  return [context.usedChoices, context.setUsedChoices];\n};\n\nconst serializeCsvData = (\n  rows: Array<[number, string, string, string, string]>,\n) => {\n  const quesDict: {\n    [key: number]: IQuestion[];\n  } = {};\n\n  rows.forEach(row => {\n    if (!quesDict[row[0]]) {\n      quesDict[row[0]] = [];\n    }\n    quesDict[row[0]].push({\n      level: row[0],\n      en: row[1].trim(),\n      meanings: [row[2].trim(), row[3].trim()],\n    });\n  });\n  return quesDict;\n};\n\nexport const useLevels = () => {\n  const data = React.useContext(DataContext);\n  return Object.keys(data.quesDict);\n};\n\nexport const useQuestions = (level: number) => {\n  const data = React.useContext(DataContext);\n\n  const questions = data.quesDict[level];\n  const choices = questions.map(question => question.meanings[1]); // the 4th position in record\n  const usedChocies = data.usedChoices;\n  const unUsedChoices = _.xor(choices, usedChocies);\n\n  if (unUsedChoices.length <= 3) {\n    data.setUsedChoices([]);\n    return {\n      questions,\n      choices,\n    };\n  }\n  return {\n    questions,\n    choices: unUsedChoices,\n  };\n};\nconst DataProvider: React.FC = props => {\n  const [isLoading, setisLoading] = useState<boolean>(true);\n  const [usedChoices, setUsedChoices] = useState<string[]>([]);\n  const [quesDict, setDict] = useState<{\n    [key: number]: IQuestion[];\n  }>([]);\n\n  const getData = async () => {\n    const res = await axios.get(process.env.REACT_APP_DATA_LINK as any);\n    if (res.status === 200) {\n      const csvBody = res.request.responseText;\n      const dict = serializeCsvData(csvString.parse(csvBody));\n      setDict(dict);\n    }\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      await getData();\n      setisLoading(false);\n    })();\n  }, []);\n  return (\n    <DataContext.Provider\n      value={{ isLoading, quesDict, usedChoices, setUsedChoices }}\n    >\n      {props.children}\n    </DataContext.Provider>\n  );\n};\nexport default DataProvider;\n","import React from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useLevels } from \"./DataProvider\";\nconst LevelWrapper = styled.div`\n  cursor: pointer;\n`;\nconst Level: React.FC<{ label: string; id: string }> = props => {\n  const history = useHistory();\n  const onLevelClick = () => {\n    history.push(`/level-detail/${props.id}`);\n  };\n  return (\n    <LevelWrapper className=\"level\" onClick={onLevelClick}>\n      {props.label}\n    </LevelWrapper>\n  );\n};\n\nexport default () => {\n  const levels = useLevels();\n  return (\n    <>\n      <div id=\"start\">なんたんご</div>\n      {levels.map(level => (\n        <Level label={`Lv${level}`} id={level} key={level} />\n      ))}\n    </>\n  );\n};\n","import _ from \"lodash\";\nimport React, { useCallback, useMemo } from \"react\";\nimport ProgressBar from \"react-flexible-progressbar\";\nimport \"./progressBar.css\";\nimport { useHistory, useParams } from \"react-router\";\nimport styled from \"styled-components\";\nimport { IQuestion, useQuestions, useSetUsedChoices } from \"./DataProvider\";\n// import PieTimer from \"./PieTimer\";\nconst QUESTION_NUMBER_PER_LEVEL = Number(\n  process.env.REACT_APP_QUESTION_NUMBER as string,\n);\nconst talkify = (window as any).talkify;\nconst voice = new talkify.Html5Player();\nvoice.forceLanguage(\"en\");\nvoice.setRate(1);\n\nconst Question: React.FC<{\n  question: IQuestion;\n  onChoosen: any;\n  choices: string[];\n}> = props => {\n  const { question, onChoosen } = props;\n\n  React.useEffect(() => {\n    console.log('current q', question.en);\n    voice.playText(question.en);\n    const handle = setTimeout(() => {\n      onChoosen(question, null, 5);\n    }, 5000);\n    return () => {\n      clearTimeout(handle);\n    };\n  }, [onChoosen, question]);\n\n  // resets the current time once the time changed\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const timeOnQuestion = useMemo(() => Date.now(), [question]);\n  const [usedChoices, setUsedChoices] = useSetUsedChoices();\n  return (\n    <>\n      <div id=\"question\">\n        <p>{props.question.en}</p>\n      </div>\n      <div id=\"choices\">\n        {props.choices.map((choice, index) => (\n          <div\n            className=\"choice\"\n            style={{ pointerEvents: \"auto\" }}\n            key={choice + index}\n            onClick={() => {\n              setUsedChoices([...usedChoices, ...props.choices]);\n              const now = Date.now();\n              const diff = now - timeOnQuestion;\n              // the || 1 is for the super fast people!!\n              props.onChoosen(props.question, choice, Math.round(diff / 1000) || 1);\n            }}\n          >\n            {choice}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport type IQuestionAnswer = IQuestion & {\n  userAnswer: string;\n  questionPoints: number;\n};\nconst ProgressBarWrapper = styled.div`\n  width: 100%;\n  position: absolute;\n  padding: 0 10px;\n  box-sizing: border-box;\n  bottom: 10px;\n`;\n\nexport default () => {\n  const params: {\n    id?: string | undefined;\n  } = useParams();\n  const { questions: totalQuestions, choices: totalChoices } = useQuestions(\n    Number(params.id),\n  );\n  const history = useHistory();\n  const [currentIndex, setIndex] = React.useState<number>(0);\n  const questions = React.useMemo(() => {\n    return _.take(_.shuffle(totalQuestions), QUESTION_NUMBER_PER_LEVEL);\n  }, [totalQuestions]);\n\n  const choices = React.useMemo(() => {\n    if (questions[currentIndex]) {\n      const opts = _.take(\n        _.shuffle(\n          totalChoices.filter(\n            choice => choice !== questions[currentIndex].meanings[1], // the 4th position in record\n          ),\n        ),\n        2,\n      );\n      opts.push(questions[currentIndex].meanings[1]); // the 4th position in record\n      return _.shuffle(opts);\n    }\n    return [];\n  }, [totalChoices, currentIndex, questions]);\n\n  const [answers, setAnswers] = React.useState<IQuestionAnswer[]>([]);\n  const question = React.useMemo(() => {\n    return questions[currentIndex];\n  }, [questions, currentIndex]);\n  const onChoosen = useCallback((currentQuestion: IQuestion, answer: string, userTime: number) => {\n    const isCorrect = currentQuestion.meanings[1] !== answer;\n    const questionPoints = isCorrect ? 5 - userTime : 0;\n    // the 4th position in record !== user answer\n    setAnswers(ans => [\n      ...ans,\n      {\n        ...currentQuestion,\n        questionPoints,\n        userAnswer: answer,\n      },\n    ]);\n    setIndex(i => i + 1);\n  }, []);\n  React.useEffect(() => {\n    if (currentIndex >= QUESTION_NUMBER_PER_LEVEL) {\n      history.push(\"/result\", {\n        questionAnswers: answers,\n        level: params.id,\n      });\n    }\n  }, [currentIndex, history, answers, params]);\n  return (\n    <div id=\"quiz\" style={{ display: \"block\" }}>\n      {question && (\n        <>\n          <Question\n            question={question}\n            onChoosen={onChoosen}\n            choices={choices}\n          />\n          <ProgressBarWrapper>\n            <ProgressBar\n              height={10}\n              progress={Math.round(\n                (currentIndex / QUESTION_NUMBER_PER_LEVEL) * 100,\n              )}\n              showPercentage={true}\n            />\n          </ProgressBarWrapper>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components\";\nimport { IQuestionAnswer } from \"./LevelDetail\";\nconst Sentence: React.FC<{\n  QA: IQuestionAnswer;\n}> = ({ QA }) => {\n  return (\n    <div className=\"sentence\">\n      <div className=\"word_en\">{QA.en}</div>\n      <div className=\"word_ja\">{QA.meanings[1]}</div>\n      <div className=\"word_sound\">{QA.meanings[0]}</div>\n    </div>\n  );\n};\nconst ResultPageWrapper = styled.div`\n  padding: 5px;\n  margin-left: 20px;\n  .success-message,\n  #review {\n    margin-top: 5px;\n  }\n`;\n\nconst filterWrongAnswers = (answers: IQuestionAnswer[]) => {\n  return answers.filter(answer => answer.questionPoints === 0);\n};\n\nexport default () => {\n  const history = useHistory<{ questionAnswers: IQuestionAnswer[]; level: string }>();\n  const { questionAnswers: QAs } = history.location.state;\n  const wrongAnswers = filterWrongAnswers(QAs);\n  const now = new Date();\n  return (\n    <ResultPageWrapper>\n      <div>\n        <h1>英単語補強プリント</h1>\n        <p>{`日時：${now.getFullYear()}年${now.getMonth() + 1}月${now.getDate()}日`}</p>\n        <p>名前：<input type=\"text\"></input></p>\n        <p><button onClick={window.print}>印刷</button></p>\n      </div>\n      {wrongAnswers.length > 0 && (\n        <div id=\"review\">\n          {wrongAnswers.map((QA, index) => (\n            <Sentence key={index} QA={QA} />\n          ))}\n        </div>\n      )}\n      {wrongAnswers.length === 0 && (\n        <h3 className=\"success-message\">Congratulations, you are super!</h3>\n      )}\n    </ResultPageWrapper>\n  );\n};\n","import React from \"react\";\nimport { MemoryRouter, Route, Switch } from \"react-router-dom\";\nimport { ClipLoader } from \"react-spinners\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport DataProvider, { DataContext } from \"./components/DataProvider\";\nimport Home from \"./components/Home\";\nimport LevelDetail from \"./components/LevelDetail\";\nimport Result from \"./components/Result\";\n\nconst LoadingWrapper = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst App: React.FC = () => {\n  return (\n    <DataProvider>\n      <DataContext.Consumer>\n        {props => {\n          if (props.isLoading) {\n            return (\n              <LoadingWrapper>\n                <ClipLoader />\n              </LoadingWrapper>\n            );\n          }\n          return (\n            <MemoryRouter>\n              <Switch>\n                <Route exact path=\"/\">\n                  <div id=\"container\">\n                    <Home />\n                  </div>\n                </Route>\n                <Route path=\"/level-detail/:id\">\n                  <div id=\"container\">\n                    <LevelDetail />\n                  </div>\n                </Route>\n                <Route path=\"/result\">\n                  <Result />\n                </Route>\n              </Switch>\n            </MemoryRouter>\n          );\n        }}\n      </DataContext.Consumer>\n    </DataProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\n// tslint:disable-next-line:interface-name\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}